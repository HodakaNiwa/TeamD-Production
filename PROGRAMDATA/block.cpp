//*****************************************************************************
//
//     ブロックの処理[block.cpp]
//     Auther:Hodaka Niwa
//
//*****************************************************************************
#include "block.h"
#include "manager.h"
#include "boxCollider.h"
#include "renderer.h"

//*****************************************************************************
//    マクロ定義
//*****************************************************************************


//*****************************************************************************
//    静的メンバ変数
//*****************************************************************************

//*****************************************************************************
//    CBlockの処理
//*****************************************************************************
//=============================================================================
//    コンストラクタ
//=============================================================================
CBlock::CBlock(int nPriority, OBJTYPE objType) : CObject3D(nPriority, objType)
{
	// 各種値のクリア
	m_pMesh = NULL;                            // メッシュへのポインタ
	m_pBuffMat = NULL;                         // マテリアル情報へのポインタ
	m_nNumMat = 0;                             // マテリアル情報の数
	m_VtxMax = D3DXVECTOR3(0.0f, 0.0f, 0.0f);  // 最大の頂点座標
	m_VtxMin = D3DXVECTOR3(0.0f, 0.0f, 0.0f);  // 最小の頂点座標
	m_fAlpha = 0.0f;                           // モデルの透明度
	m_bBreak = false;                          // 壊せるかどうか
}

//=============================================================================
//    デストラクタ
//=============================================================================
CBlock::~CBlock()
{

}

//=============================================================================
//    生成処理
//=============================================================================
CBlock *CBlock::Create(D3DXVECTOR3 pos, D3DXVECTOR3 rot, TYPE type, int nModelIdx, bool bBreak, LPD3DXMESH pMesh, LPD3DXBUFFER pBuffMat, DWORD nNumMat, LPDIRECT3DTEXTURE9 *pTexture, float fBoxWidth, float fBoxHeight, float fBoxDepth, int nPriority)
{
	CBlock *pBlock = NULL;      // ブロッククラス型のポインタ
	if (pBlock == NULL)
	{// メモリが空になっている
		pBlock = new CBlock(nPriority);
		if (pBlock != NULL)
		{// インスタンスを生成できた
		    // 各種値の設定
			pBlock->SetPos(pos);                                     // 座標
			pBlock->SetRot(rot);                                     // 向き
			pBlock->SetType(type);                                   // 種類番号
			pBlock->SetModelIdx(nModelIdx);                          // 使用するモデルの番号
			pBlock->SetBreak(bBreak);                                // 壊せるかどうか
			pBlock->SetAlpha(1.0f);                                  // モデルの透明度
			pBlock->BindModel(pMesh, pBuffMat, nNumMat, pTexture);   // モデル情報割り当て

			// 当たり判定用箱モデルを作成
			pBlock->CreateBoxCollider(fBoxWidth, fBoxHeight, fBoxDepth);

			if (FAILED(pBlock->Init()))
			{// 初期化に失敗した
				return NULL;
			}
		}
		else
		{// インスタンスを生成できなかった
			return NULL;
		}
	}
	else
	{// インスタンスを生成できなかった
		return NULL;
	}

	return pBlock;
}

//=============================================================================
//    初期化処理
//=============================================================================
HRESULT CBlock::Init(void)
{
	return S_OK;
}

//=============================================================================
//    終了処理
//=============================================================================
void CBlock::Uninit(void)
{
	CObject3D::Uninit();
}

//=============================================================================
//    更新処理
//=============================================================================
void CBlock::Update(void)
{

}

//=============================================================================
//    描画処理
//=============================================================================
void CBlock::Draw(void)
{
	D3DMATERIAL9 matDef;     // 現在のマテリアル保存用
	D3DXMATERIAL *pMat;      // マテリアルデータへのポインタ
	float fAlphaDef = 0.0f;  // デフォルトの透明度

	// レンダリングクラス型のポインタ
	CRenderer *pRenderer = CManager::GetRenderer();

	if (pRenderer != NULL)
	{// レンダリングクラスが生成されている
	    // デバイスの取得
		LPDIRECT3DDEVICE9 pDevice = pRenderer->GetDevice();
		if (pDevice != NULL)
		{// デバイスが取得できた
		    // ワールドマトリックス設定処理
			SetMtxWorld(pDevice);

			// 現在のマテリアルを取得
			pDevice->GetMaterial(&matDef);

			if (m_pBuffMat != NULL && m_pMesh != NULL)
			{// Xファイルからモデルデータが読み込めている
			    // マテリアルデータへのポインタを取得
				pMat = (D3DXMATERIAL*)m_pBuffMat->GetBufferPointer();

				for (int nCntMat = 0; nCntMat < (int)m_nNumMat; nCntMat++)
				{// 設定されていたマテリアルの数だけ繰り返し
					// 透明度の設定
					fAlphaDef = pMat[nCntMat].MatD3D.Diffuse.a;
					pMat[nCntMat].MatD3D.Diffuse.a = m_fAlpha;

				    // マテリアルの設定
					pDevice->SetMaterial(&pMat[nCntMat].MatD3D);

					if (m_pTexture != NULL)
					{// テクスチャ情報が引き出せている
					    // テクスチャの設定
						pDevice->SetTexture(0, m_pTexture[nCntMat]);
					}
					else
					{// テクスチャ情報が引き出せていない
					    // テクスチャの設定
						pDevice->SetTexture(0, NULL);
					}

					// モデル(パーツ)の描画
					m_pMesh->DrawSubset(nCntMat);

					// 透明度を戻す
					pMat[nCntMat].MatD3D.Diffuse.a = fAlphaDef;
				}
			}

			// 保存していたマテリアルに戻す
			pDevice->SetMaterial(&matDef);
		}
	}

	// 3Dオブジェクトの描画
	CObject3D::Draw();
}

//=============================================================================
//    オブジェクトに当たったときの処理
//=============================================================================
void CBlock::Hit(CScene *pScene)
{

}

//=============================================================================
//    当たり判定用箱モデルを作成する処理
//=============================================================================
void CBlock::CreateBoxCollider(float fBoxWidth, float fBoxHeight, float fBoxDepth)
{
	CBoxCollider *pBoxCollider = CBoxCollider::Create(GetPos(), fBoxWidth, fBoxHeight, fBoxDepth, true);
	SetBoxCollider(pBoxCollider);
}

//=============================================================================
//    モデル情報設定処理
//=============================================================================
void CBlock::BindModel(LPD3DXMESH pMesh, LPD3DXBUFFER pBuffMat, DWORD nNumMat, LPDIRECT3DTEXTURE9 *pTexture, D3DXVECTOR3 VtxMax, D3DXVECTOR3 VtxMin)
{
	m_pMesh = pMesh;
	m_pBuffMat = pBuffMat;
	m_nNumMat = nNumMat;
	m_pTexture = pTexture;
	m_VtxMax = VtxMax;
	m_VtxMin = VtxMin;
}

//=============================================================================
//    種類番号設定処理
//=============================================================================
void CBlock::SetType(const TYPE type)
{
	m_Type = type;
}

//=============================================================================
//    使用するモデルの番号設定処理
//=============================================================================
void CBlock::SetModelIdx(const int nModelIdx)
{
	m_nModelIdx = nModelIdx;
}

//=============================================================================
//    メッシュへのポインタ設定処理
//=============================================================================
void CBlock::SetMesh(const LPD3DXMESH pMesh)
{
	m_pMesh = pMesh;
}

//=============================================================================
//    マテリアル情報へのポインタ設定処理
//=============================================================================
void CBlock::SetBuffMat(const LPD3DXBUFFER pBuffMat)
{
	m_pBuffMat = pBuffMat;
}

//=============================================================================
//    マテリアル情報の数設定処理
//=============================================================================
void CBlock::SetNumMat(const DWORD nNumMat)
{
	m_nNumMat = nNumMat;
}

//=============================================================================
//    テクスチャへのポインタ設定処理
//=============================================================================
void CBlock::SetTexture(LPDIRECT3DTEXTURE9 *pTexture)
{
	m_pTexture = pTexture;
}

//=============================================================================
//    最大の頂点座標設定処理
//=============================================================================
void CBlock::SetVtxMax(const D3DXVECTOR3 VtxMax)
{
	m_VtxMax = VtxMax;
}

//=============================================================================
//    最小の頂点座標設定処理
//=============================================================================
void CBlock::SetVtxMin(const D3DXVECTOR3 VtxMin)
{
	m_VtxMin = VtxMin;
}

//=============================================================================
//    モデルの透明度設定処理
//=============================================================================
void CBlock::SetAlpha(const float fAlpha)
{
	m_fAlpha = fAlpha;
}

//=============================================================================
//    壊せるかどうか設定処理
//=============================================================================
void CBlock::SetBreak(const bool bBreak)
{
	m_bBreak = bBreak;
}

//=============================================================================
//    種類番号取得処理
//=============================================================================
CBlock::TYPE CBlock::GetType(void)
{
	return m_Type;
}

//=============================================================================
//    使用するモデルの番号取得処理
//=============================================================================
int CBlock::GetModelIdx(void)
{
	return m_nModelIdx;
}

//=============================================================================
//    メッシュへのポインタ取得処理
//=============================================================================
LPD3DXMESH CBlock::GetMesh(void)
{
	return m_pMesh;
}

//=============================================================================
//    マテリアル情報へのポインタ取得処理
//=============================================================================
LPD3DXBUFFER CBlock::GetBuffMat(void)
{
	return m_pBuffMat;
}

//=============================================================================
//    マテリアル情報の数取得処理
//=============================================================================
DWORD CBlock::GetNumMat(void)
{
	return m_nNumMat;
}

//=============================================================================
//    テクスチャへのポインタ取得処理
//=============================================================================
LPDIRECT3DTEXTURE9 *CBlock::GetTexture(void)
{
	return m_pTexture;
}

//=============================================================================
//    最大の頂点座標取得処理
//=============================================================================
D3DXVECTOR3 CBlock::GetVtxMax(void)
{
	return m_VtxMax;
}

//=============================================================================
//    最小の頂点座標取得処理
//=============================================================================
D3DXVECTOR3 CBlock::GetVtxMin(void)
{
	return m_VtxMin;
}

//=============================================================================
//    モデルの透明度取得処理
//=============================================================================
float CBlock::GetAlpha(void)
{
	return m_fAlpha;
}

//=============================================================================
//    壊せるかどうか取得処理
//=============================================================================
bool CBlock::GetBreak(void)
{
	return m_bBreak;
}