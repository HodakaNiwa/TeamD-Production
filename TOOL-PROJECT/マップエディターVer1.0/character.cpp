//=============================================================================
//
// キャラクターの処理 [character.cpp]
// Author : Jukiya Hayakawa
//
//=============================================================================
#include "character.h"
#include "manager.h"
#include "renderer.h"
#include "debugproc.h"
#include "model.h"
#include "bullet.h"

//*****************************************************************************
// マクロ定義
//*****************************************************************************

//=============================================================================
// 静的メンバ変数宣言
//=============================================================================

//=============================================================================
// キャラクターのコンストラクタ
//=============================================================================
CCharacter::CCharacter(int nPrioriry, OBJTYPE objtype) : CObject3D()
{
	m_pModel = NULL;							//モデル情報へのポインタ
	m_posOld = INITIALIZE_D3DXVECTOR3;			//過去の位置
	m_move = INITIALIZE_D3DXVECTOR3;			//移動量
	m_bShoot = false;							//撃っているかどうか
}
//=============================================================================
// キャラクターのコンストラクタ
//=============================================================================
CCharacter::~CCharacter()
{

}

//=============================================================================
// 初期化処理
//=============================================================================
HRESULT CCharacter::Init(void)
{
	//オブジェクトの初期化処理
	CObject3D::Init();

	//種類の設置処理
	SetObjType(OBJTYPE_CHARACTER);
	return S_OK;
}

//=============================================================================
// 終了処理
//=============================================================================
void CCharacter::Uninit(void)
{
	//モデルの破棄
	if (m_pModel != NULL)
	{
		m_pModel->Uninit();
		delete m_pModel;
		m_pModel = NULL;
	}

	//オブジェクトの終了処理
	CObject3D::Uninit();

	//オブジェクトの破棄
	Release();
}

//=============================================================================
// 更新処理
//=============================================================================
void CCharacter::Update(void)
{
}

//=============================================================================
// 描画処理
//=============================================================================
void CCharacter::Draw(void)
{
	//if (m_pModel != NULL)
	//{
	//	m_pModel->Draw();
	//}
}

//=============================================================================
// 過去の位置の設置処理
//=============================================================================
void CCharacter::SetPosOld(D3DXVECTOR3 posOld)
{
	m_posOld = posOld;
}

//=============================================================================
// 移動量の設置処理
//=============================================================================
void CCharacter::SetMove(D3DXVECTOR3 move)
{
	m_move = move;
}

//=============================================================================
// 撃っているかどうかの設置処理
//=============================================================================
void CCharacter::SetShoot(bool bShoot)
{
	m_bShoot = bShoot;
}

//=============================================================================
// 現在向き情報設置処理
//=============================================================================
void CCharacter::SetNowRotInfo(CCharacter::NOW_ROT_INFO nowRotInfo)
{
	m_nowRotInfo = nowRotInfo;
}

//=============================================================================
// 過去の位置の取得処理
//=============================================================================
D3DXVECTOR3 CCharacter::GetPosOld(void)
{
	return m_posOld;
}

//=============================================================================
// 移動量の取得処理
//=============================================================================
D3DXVECTOR3 CCharacter::GetMove(void)
{
	return m_move;
}

//=============================================================================
// 撃っているかどうかの取得処理
//=============================================================================
bool CCharacter::GetShoot(void)
{
	return m_bShoot;
}

//=============================================================================
// 現座の向き情報取得処理
//=============================================================================
CCharacter::NOW_ROT_INFO CCharacter::GetNowRotInfo(void)
{
	return m_nowRotInfo;
}