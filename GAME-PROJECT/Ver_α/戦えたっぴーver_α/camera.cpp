//=============================================================================
//
// カメラ処理 [camera.cpp]
// Author : Hodaka Niwa
//
//=============================================================================
#include "camera.h"
#include "input.h"
#include "main.h"
#include "manager.h"
#include "renderer.h"
#include "debugproc.h"

//*****************************************************************************
// マクロ定義
//*****************************************************************************
#define CAMERA_ANGEL_VIEW      (45.0f)                           // カメラの画角
#define CAMERA_ANGLE_SPEED     (0.01f)                           // カメラをマウスで回転させるスピード倍率
#define CAMERA_MOVE_SPEED      (1.3f)                            // カメラをマウスで移動させるスピード倍率
#define CAMERA_LENGTH_MIN      (100.0f)                          // 視点注視点の距離の最小値
#define CAMERA_LENGTH_MAX      (1700.0f)                         // 視点注視点の距離の最大値

#define CAMERA_LENGTH_INI      (1700.0f)                         // 視点注視点間の距離(初期値)
#define CAMERA_ROT_INI         (D3DXVECTOR3(-1.2f,0.0f,0.0f))    // カメラの向き(初期値)
#define TOPVIEW_CAMERA_ROT_INI (D3DXVECTOR3(-1.57f,0.0f,0.0f))   // トップビューカメラの向き(初期値)
#define CAMERA_MOVE            (3.0f)                            // カメラの動くスピード
#define CAMERA_POS_X           (175.0f)

//*****************************************************************************
// 静的メンバ変数宣言
//*****************************************************************************

//*****************************************************************************
// CCameraの処理
//*****************************************************************************
//=============================================================================
// コンストラクタ
//=============================================================================
CCamera::CCamera()
{

}

//=============================================================================
// デストラクタ
//=============================================================================
CCamera::~CCamera()
{

}

//=============================================================================
// 生成処理
//=============================================================================
CCamera *CCamera::Create(void)
{
	CCamera *pCamera = NULL;

	if (pCamera == NULL)
	{
		pCamera = new CCamera;
		pCamera->Init();
	}
	return pCamera;
}

//=============================================================================
// 初期化処理
//=============================================================================
HRESULT CCamera::Init(void)
{
	// カメラの初期情報を設定
	m_vecU = D3DXVECTOR3(0.0f, 1.0f, 0.0f);          // カメラの上方向ベクトル
	m_posR = D3DXVECTOR3(CAMERA_POS_X, 0.0f, 0.0f);  // カメラの注視点
	m_rot = CAMERA_ROT_INI;                          // カメラの現在の向き
	m_rotDest = m_rot;                               // カメラの目的の向き
	m_rotDiff = INITIALIZE_D3DXVECTOR3;              // 現在の向きと目的の向きの差分
	m_fLength = CAMERA_LENGTH_INI;                   // 視点注視点間の距離
	m_bMouseMove = true;                             // マウスで動かせるかどうか
	m_bChengeLength = true;                          // 視点注視点間の距離を変更できるかどうか

	// カメラの視点の位置を計算
	m_posV = D3DXVECTOR3(CAMERA_POS_X, 0.0f, 0.0f);
	m_posV.y = m_posR.y - sinf(m_rot.x) * m_fLength;
	m_posV.z = m_posR.z - cosf(m_rot.x) * m_fLength;

	return S_OK;
}

//=============================================================================
// 終了処理
//=============================================================================
void CCamera::Uninit(void)
{
}

//=============================================================================
// 更新処理
//=============================================================================
void CCamera::Update(void)
{
#ifdef _DEBUG
	//注視点の表示
	CDebugProc::Print(1, "視点の移動    : x[%.1f],y[%.1f],z[%.1f]\n", m_posV.x, m_posV.y, m_posV.z);
	//視点の表示
	CDebugProc::Print(1, "注視点の移動  : x[%.1f],y[%.1f],z[%.1f]\n", m_posR.x, m_posR.y, m_posR.z);
#endif
}

//=============================================================================
// カメラのリセット処理
//=============================================================================
void CCamera::Reset(void)
{
	m_rot = CAMERA_ROT_INI;
	m_fLength = CAMERA_LENGTH_INI;

	// 視点注視点の位置を設定
	m_posR = INITIALIZE_D3DXVECTOR3;
	m_posV.y = m_posR.y - sinf(m_rot.x) * m_fLength;
	m_posV.z = m_posR.z - cosf(m_rot.x) * m_fLength;
}

//=============================================================================
// カメラの設定処理
//=============================================================================
void CCamera::SetCamera(void)
{
	//レンダリングの取得
	CRenderer *pRenderer;
	pRenderer = CManager::GetRenderer();

	//デバイスの取得
	LPDIRECT3DDEVICE9 pDevice;
	pDevice = pRenderer->GetDevice();

	// プロジェクションマトリックスの初期化
	D3DXMatrixIdentity(&m_mtxProjection);

	// プロジェクションマトリックスを作成
	D3DXMatrixPerspectiveFovLH(&m_mtxProjection,
		D3DXToRadian(45.0f),						//画角
		(float)SCREEN_WIDTH / (float)SCREEN_HEIGHT,	//画面比率
		10.0f,										//手前
		20000.0f);									//奥行き

	// プロジェクションマトリックスの設定
	pDevice->SetTransform(D3DTS_PROJECTION, &m_mtxProjection);

	// ビューマトリックスの初期化
	D3DXMatrixIdentity(&m_mtxView);

	// ビューマトリックスを作成
	D3DXMatrixLookAtLH(&m_mtxView,
				       &m_posV,
					   &m_posR,
					   &m_vecU);

	// ビューマトリックスの設定
	pDevice->SetTransform(D3DTS_VIEW, &m_mtxView);
}

//=============================================================================
// カメラの視点取得
//=============================================================================
D3DXVECTOR3 CCamera::GetPosV(void)
{
	return m_posV;
}

//=============================================================================
// カメラの注視点取得
//=============================================================================
D3DXVECTOR3 CCamera::GetPosR(void)
{
	return m_posR;
}

//=============================================================================
// カメラの向き取得
//=============================================================================
D3DXVECTOR3 CCamera::GetRot(void)
{
	return m_rot;
}

//=============================================================================
// カメラの長さ取得
//=============================================================================
float CCamera::GetLength(void)
{
	return m_fLength;
}

//=============================================================================
// カメラをマウスで動かせるかどうか取得
//=============================================================================
bool CCamera::GetMouseMove(void)
{
	return m_bMouseMove;
}

//=============================================================================
// カメラの視点注視点間の距離を変更できるかどうか取得
//=============================================================================
bool CCamera::GetChengeLength(void)
{
	return m_bChengeLength;
}

//=============================================================================
// カメラの視点設置処理
//=============================================================================
void CCamera::SetPosV(D3DXVECTOR3 posV)
{
	m_posV = posV;
}

//=============================================================================
// カメラの注視点設置処理
//=============================================================================
void CCamera::SetPosR(D3DXVECTOR3 posR)
{
	m_posR = posR;
}

//=============================================================================
// カメラの向き設定処理
//=============================================================================
void CCamera::SetRot(D3DXVECTOR3 Rot)
{
	m_rot = Rot;
}

//=============================================================================
// カメラの視点注視点間の距離設定処理
//=============================================================================
void CCamera::SetLength(float fLength)
{
	m_fLength = fLength;
}

//=============================================================================
// カメラをマウスで動かせるかどうか設定
//=============================================================================
void CCamera::SetMouseMove(bool bMouseMove)
{
	m_bMouseMove = bMouseMove;
}

//=============================================================================
// カメラの視点注視点間の距離を変更できるかどうか設定
//=============================================================================
void CCamera::SetChengeLength(bool bChengeLength)
{
	m_bChengeLength = bChengeLength;
}


//*****************************************************************************
// CCharaSelectCameraの処理
//*****************************************************************************
//=============================================================================
// コンストラクタ
//=============================================================================
CCharaSelectCamera::CCharaSelectCamera()
{

}

//=============================================================================
// デストラクタ
//=============================================================================
CCharaSelectCamera::~CCharaSelectCamera()
{

}

//=============================================================================
// 生成処理
//=============================================================================
CCharaSelectCamera *CCharaSelectCamera::Create(D3DXVECTOR3 posV, D3DXVECTOR3 posR)
{
	CCharaSelectCamera *pCharaSelectCamera = NULL;

	if (pCharaSelectCamera == NULL)
	{
		pCharaSelectCamera = new CCharaSelectCamera;
		pCharaSelectCamera->Init(posV, posR);
	}
	return pCharaSelectCamera;
}

//=============================================================================
// 初期化処理
//=============================================================================
HRESULT CCharaSelectCamera::Init(D3DXVECTOR3 posV, D3DXVECTOR3 posR)
{
	// 共通の初期化処理
	CCamera::Init();

	// 視点と注視点を改めて設定する
	SetPosV(posV);
	SetPosR(posR);

	return S_OK;
}

//=============================================================================
// 終了処理
//=============================================================================
void CCharaSelectCamera::Uninit(void)
{
	// 共通の終了処理
	CCamera::Uninit();
}

//=============================================================================
// 更新処理
//=============================================================================
void CCharaSelectCamera::Update(void)
{

}